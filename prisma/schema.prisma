datasource db {
  provider          = "mongodb"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  restaurants   Restaurant[]
  categories    Category[]
  items         Item[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  active     Boolean
  whatsapp   String?
  landline   String?
  address    String
  methods    Json?
  workHours  Json?
  logo       String
  color      String
  linkMaps   String?
  note       String?
  activeMenu Boolean
  slug       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String?  @db.ObjectId

  User       User?      @relation(fields: [userId], references: [id])
  Categories Category[]
  Items      Item[]
}

model Category {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  order        Int?        @default(0)
  items        Item[]
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?     @db.ObjectId
  User         User?       @relation(fields: [userId], references: [id])
  userId       String?     @db.ObjectId
}

model Item {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  price       Float
  image       String
  highlight   Boolean
  active      Boolean
  sale        Boolean
  salePrice   Float?
  order       Int?    @default(0)

  categoryId   String?     @db.ObjectId
  Category     Category?   @relation(fields: [categoryId], references: [id])
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?     @db.ObjectId
  User         User?       @relation(fields: [userId], references: [id])
  userId       String?     @db.ObjectId
}
