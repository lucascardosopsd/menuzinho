datasource db {
  provider          = "mongodb"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  name                String?
  email               String?            @unique
  emailVerified       DateTime?
  image               String?
  advertiserAccountId String?            @db.ObjectId
  lastPaymentId       String?
  role                String             @default("user")
  afiliateId          String?
  accounts            Account[]
  sessions            Session[]
  restaurants         Restaurant[]
  categories          Category[]
  items               Item[]
  Ad                  Ad[]
  AdvertiserAccount   AdvertiserAccount?
  payments            Payment[]
  Afiliate            Afiliate[]
}

model Afiliate {
  id                        String                      @id @default(auto()) @map("_id") @db.ObjectId
  name                      String
  email                     String
  phone                     String
  pix                       String
  kickback                  Int                         @default(70)
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  user                      User                        @relation(fields: [userId], references: [id])
  AfiliateAdvertiserAccount AfiliateAdvertiserAccount[]
  userId                    String                      @db.ObjectId
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  active     Boolean
  whatsapp   String?
  landline   String?
  address    String
  methods    Json?
  workHours  Json?
  logo       String
  color      String
  linkMaps   String?
  note       String?
  activeMenu Boolean
  slug       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String?  @db.ObjectId
  regionId   String?  @db.ObjectId

  User       User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  region     Region?    @relation(fields: [regionId], references: [id])
  Categories Category[]
  Items      Item[]
}

model Category {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  order        Int?        @default(0)
  items        Item[]
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?     @db.ObjectId
  User         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?     @db.ObjectId
}

model Item {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  price       Float
  image       String
  highlight   Boolean
  active      Boolean
  sale        Boolean
  salePrice   Float?
  order       Int?    @default(0)

  categoryId   String?     @db.ObjectId
  Category     Category?   @relation(fields: [categoryId], references: [id])
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?     @db.ObjectId
  User         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?     @db.ObjectId
}

model Region {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  state      String
  active     Boolean
  ads        Ad[]
  Restaurant Restaurant[]
}

model Ad {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  image       String
  link        String?
  expiration  DateTime?
  active      Boolean
  regionId    String    @db.ObjectId
  views       View[]
  userId      String?   @db.ObjectId
  user        User?     @relation(fields: [userId], references: [id])
  clicks      Click[]

  region Region @relation(fields: [regionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model View {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  adId         String @db.ObjectId
  restaurantId String @db.ObjectId
  ad           Ad?    @relation(fields: [adId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Click {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  adId      String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Ad Ad? @relation(fields: [adId], references: [id])
}

model AdvertiserAccount {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  cpfCnpj    String   @unique
  phone      String
  personType String
  customerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String   @unique @db.ObjectId
  afiliateId String?  @db.ObjectId

  payments                  Payment[]
  user                      User                        @relation(fields: [userId], references: [id])
  AfiliateAdvertiserAccount AfiliateAdvertiserAccount[]
}

model AfiliateAdvertiserAccount {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  afiliateId          String            @db.ObjectId
  advertiserAccountId String            @db.ObjectId
  afiliate            Afiliate          @relation(fields: [afiliateId], references: [id], onDelete: Cascade)
  advertiserAccount   AdvertiserAccount @relation(fields: [advertiserAccountId], references: [id], onDelete: Cascade)

  @@unique([afiliateId, advertiserAccountId])
}

model Payment {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  paymentId            String
  dateCreated          String
  customer             String
  paymentLink          String?
  dueDate              String
  value                Int
  billingType          String
  status               String
  description          String?
  paymentDate          String
  deleted              Boolean
  advertiserAcccountId String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  AdvertiserAccount   AdvertiserAccount? @relation(fields: [advertiserAccountId], references: [id])
  advertiserAccountId String?            @db.ObjectId
  User                User?              @relation(fields: [userId], references: [id])
  userId              String?            @db.ObjectId
}
