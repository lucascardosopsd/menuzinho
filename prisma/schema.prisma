datasource db {
  provider          = "mongodb"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  lastPaymentId String?
  role          String         @default("user")
  accounts      Account[]
  sessions      Session[]
  restaurants   Restaurant[]
  categories    Category[]
  items         Item[]
  subscription  Subscription[]
  customerId    String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Payment   Payment[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  active     Boolean
  whatsapp   String?
  landline   String?
  address    String
  methods    Json?
  workHours  Json?
  logo       String
  color      String
  linkMaps   String?
  note       String?
  activeMenu Boolean
  slug       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String?  @db.ObjectId
  province   String
  state      String

  User       User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Categories Category[]
  Items      Item[]
}

model Category {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  order        Int?        @default(0)
  items        Item[]
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String?     @db.ObjectId
  User         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?     @db.ObjectId
}

model Item {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  price       Float?
  image       String
  highlight   Boolean
  active      Boolean
  sale        Boolean
  salePrice   Float?
  order       Int     @default(0)

  categoryId   String?     @db.ObjectId
  Category     Category?   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String?     @db.ObjectId
  User         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?     @db.ObjectId
}

model Plan {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  subTitle     String?
  alias        String
  level        Int
  highlighted  Boolean
  price        Float
  description  String
  url          String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Subscription Subscription[]
}

model Subscription {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  object           String
  asaasId          String
  dateCreated      String
  customerId       String
  value            Int
  nextDueDate      String
  cycle            String
  description      String
  billingType      String
  deleted          Boolean
  status           String
  planId           String?  @db.ObjectId
  userId           String?  @db.ObjectId
  paymentProfileId String?  @db.ObjectId
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  User    User?     @relation(fields: [userId], references: [id])
  Plan    Plan?     @relation(fields: [planId], references: [id])
  Payment Payment[]
}

model Payment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  asaasId        String
  dateCreated    String
  customer       String
  paymentLink    String?
  dueDate        String
  value          Float
  billingType    String
  status         String
  description    String?
  paymentDate    String?
  deleted        Boolean
  plan           String
  userId         String   @db.ObjectId
  subscriptionId String?  @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  Subscription Subscription? @relation(fields: [subscriptionId], references: [id])
  User         User?         @relation(fields: [userId], references: [id])
}
