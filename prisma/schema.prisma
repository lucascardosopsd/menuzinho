datasource db {
  provider          = "mongodb"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  clerkId      String         @unique
  name         String?
  email        String         @unique
  profileImage String?
  customerId   String?
  role         String?        @default("user")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  subscription Subscription[]
  restaurants  Restaurant[]
  categories   Category[]
  Payment      Payment[]
  items        Item[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  active     Boolean
  whatsapp   String?
  landline   String?
  address    String
  methods    Json?
  workHours  Json?
  logo       String
  color      String
  linkMaps   String?
  note       String?
  activeMenu Boolean
  slug       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String?  @db.ObjectId
  province   String
  state      String

  User       User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Categories Category[]
  Items      Item[]
}

model Category {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  order        Int?    @default(0)
  active       Boolean @default(true)
  restaurantId String? @db.ObjectId
  userId       String? @db.ObjectId

  items      Item[]
  Restaurant Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  User       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Item {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  price        Float?
  image        String
  highlight    Boolean
  active       Boolean
  sale         Boolean
  salePrice    Float?
  order        Int     @default(0)
  restaurantId String? @db.ObjectId
  categoryId   String? @db.ObjectId

  Category   Category?   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Restaurant Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  User       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?     @db.ObjectId
}

model Plan {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  subTitle     String?
  alias        String
  level        Int
  highlighted  Boolean
  price        Float
  description  String
  order        Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Subscription Subscription[]
  Payment      Payment[]
}

model Subscription {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  object           String?
  asaasId          String?
  dateCreated      String
  customerId       String
  value            Float
  nextDueDate      String?
  cycle            String?
  description      String
  billingType      String
  deleted          Boolean
  status           String?
  planId           String?  @db.ObjectId
  userId           String?  @db.ObjectId
  paymentProfileId String?  @db.ObjectId
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  User    User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Plan    Plan?     @relation(fields: [planId], references: [id], onDelete: Cascade)
  Payment Payment[]
}

model Payment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  asaasId        String
  dateCreated    String
  customer       String
  paymentLink    String?
  dueDate        String?
  value          Float
  billingType    String
  status         String
  description    String?
  paymentDate    String?
  deleted        Boolean
  userId         String   @db.ObjectId
  planId         String?  @db.ObjectId
  subscriptionId String?  @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  Subscription Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  Plan         Plan?         @relation(fields: [planId], references: [id], onDelete: Cascade)
  User         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
}
